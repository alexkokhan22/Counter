[{"E:\\it-incubator\\Counter\\src\\index.tsx":"1","E:\\it-incubator\\Counter\\src\\reportWebVitals.ts":"2","E:\\it-incubator\\Counter\\src\\App.tsx":"3","E:\\it-incubator\\Counter\\src\\CounterDisplay\\CounterDisplay.tsx":"4","E:\\it-incubator\\Counter\\src\\DisplaySettings\\DisplaySettings.tsx":"5","E:\\it-incubator\\Counter\\src\\Buttons\\Buttons.tsx":"6","E:\\it-incubator\\Counter\\src\\redux\\store.ts":"7","E:\\it-incubator\\Counter\\src\\redux\\counter-reducer.ts":"8"},{"size":573,"mtime":1615908128774,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":1609060780998,"results":"11","hashOfConfig":"10"},{"size":3285,"mtime":1615908898140,"results":"12","hashOfConfig":"10"},{"size":796,"mtime":1615134970383,"results":"13","hashOfConfig":"10"},{"size":1168,"mtime":1615134366676,"results":"14","hashOfConfig":"10"},{"size":449,"mtime":1615135121139,"results":"15","hashOfConfig":"10"},{"size":290,"mtime":1615907698097,"results":"16","hashOfConfig":"10"},{"size":2989,"mtime":1615971130655,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1lr8qod",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\it-incubator\\Counter\\src\\index.tsx",[],["37","38"],"E:\\it-incubator\\Counter\\src\\reportWebVitals.ts",[],"E:\\it-incubator\\Counter\\src\\App.tsx",["39","40"],"import './App.css';\nimport {CounterDisplay} from \"./CounterDisplay/CounterDisplay\";\nimport {DisplaySettings} from \"./DisplaySettings/DisplaySettings\";\nimport {Buttons} from \"./Buttons/Buttons\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootState} from \"./redux/store\";\nimport {\n    incAC,\n    onChangeMaxValueAC,\n    onChangeStartValueAC,\n    resetAC,\n    setAC,\n    setDisplayAC,\n    statePropsType\n} from \"./redux/counter-reducer\";\n\nfunction App() {\n\n    const counter = useSelector<AppRootState, statePropsType>(state => state.counter)\n    const dispatch = useDispatch()\n    let disabledSet = counter.startValue < 0\n        || counter.maxValue > 99\n        || counter.maxValue === counter.startValue\n        || counter.maxValue < counter.startValue\n\n    {/* let [count, setCount] = useState<number>(0)\n    let [count1, setCount1] = useState<string>('')\n    let [maxValue, setMaxValue] = useState<number>(0)\n    let [startValue, setStartValue] = useState<number>(0)\n    let [editMode, setEditMode] = useState<boolean>(true)\n    */\n    }\n\n\n    {/* useEffect(() => {\n        let valueASString = localStorage.getItem('startValue')\n        if (valueASString) {\n            let newValue = JSON.parse(valueASString)\n            setStartValue(newValue)\n        }\n    }, [])\n    useEffect(() => {\n        localStorage.setItem('startValue', JSON.stringify(startValue))\n    }, [startValue])\n\n    useEffect(() => {\n        let valueASString = localStorage.getItem('maxValue')\n        if (valueASString) {\n            let newValue = JSON.parse(valueASString)\n            setMaxValue(newValue)\n        }\n    }, [])\n    useEffect(() => {\n        localStorage.setItem('Value', JSON.stringify(maxValue))\n    }, [maxValue])*/\n    }\n\n\n    const onChangeMaxValue = (value: number) => {\n        const action = onChangeMaxValueAC(value)\n        dispatch(action)\n    }\n\n    const onChangeStartValue = (value: number) => {\n        const action = onChangeStartValueAC(value)\n        dispatch(action)\n    }\n\n    function inc() {\n        const action = incAC()\n        dispatch(action)\n    }\n\n    function reset() {\n        const action = resetAC()\n        dispatch(action)\n    }\n\n    const set = () => {\n        const action = setAC()\n        dispatch(action)\n    }\n\n    function setDisplay() {\n        const action = setDisplayAC()\n        dispatch(action)\n\n    }\n\n\n    return (\n        <div className=\"App\">\n            <CounterDisplay\n                count={counter.countNumber}\n                startValue={counter.startValue}\n                maxValue={counter.maxValue} count1={counter.countString}\n                editMode={counter.editMode}/>\n            <Buttons onClick={inc} title={'inc'} disabled={counter.countNumber === counter.maxValue ? true : false}/>\n            <Buttons onClick={reset} title={'reset'} disabled={false}/>\n\n\n            <DisplaySettings\n                maxValue={counter.maxValue}\n                startValue={counter.startValue}\n                onChangeMaxValue={onChangeMaxValue}\n                onChangeStartValue={onChangeStartValue}\n                set={set}\n                setDisplay={setDisplay}\n            />\n            <Buttons onClick={set} title={'set'} disabled={disabledSet ? true : false}/>\n        </div>\n    );\n}\n\nexport default App;\n","E:\\it-incubator\\Counter\\src\\CounterDisplay\\CounterDisplay.tsx",["41","42"],"import React, {ChangeEvent, useState} from \"react\";\r\nimport s from '../CounterDisplay/Counter.module.css'\r\n\r\n\r\n\r\ntype  CounterDisplayType = {\r\n    count: number\r\n    count1: string\r\n    maxValue: number\r\n    editMode: boolean\r\n    startValue: number\r\n}\r\n\r\nexport function CounterDisplay(props: CounterDisplayType) {\r\n    let errorSpan = props.startValue < 0\r\n        || props.maxValue <= props.startValue\r\n        || props.maxValue > 99\r\n        || props.maxValue === props.startValue\r\n\r\n\r\n\r\n\r\n    return <div className={s.span}>\r\n        {\r\n            props.editMode\r\n                ? <span className={errorSpan ? s.spanText : ''}>{props.count1}</span>\r\n                : <span className={props.count === props.maxValue ? s.spanText : ''}>{props.count}</span>\r\n        }\r\n    </div>\r\n}\r\n\r\n\r\n\r\n","E:\\it-incubator\\Counter\\src\\DisplaySettings\\DisplaySettings.tsx",[],"E:\\it-incubator\\Counter\\src\\Buttons\\Buttons.tsx",[],"E:\\it-incubator\\Counter\\src\\redux\\store.ts",[],"E:\\it-incubator\\Counter\\src\\redux\\counter-reducer.ts",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":26,"column":5,"nodeType":"49","messageId":"50","endLine":32,"endColumn":6},{"ruleId":"47","severity":1,"message":"48","line":35,"column":5,"nodeType":"49","messageId":"50","endLine":56,"endColumn":6},{"ruleId":"51","severity":1,"message":"52","line":1,"column":16,"nodeType":"53","messageId":"54","endLine":1,"endColumn":27},{"ruleId":"51","severity":1,"message":"55","line":1,"column":29,"nodeType":"53","messageId":"54","endLine":1,"endColumn":37},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","@typescript-eslint/no-unused-vars","'ChangeEvent' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]